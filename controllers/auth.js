// Validate - name, email, password - with Mongoose
//await User.create(req.body);
// Hash Password (with bcryptjs)
// Save User
// Generate Token
// Send Response with Token

const User=require('../models/User');
const {StatusCodes}=require('http-status-codes');
const {BadRequestError, UnauthenticatedError}=require('../errors');


const register=async (req,res)=>{
    // we hashed the password before saving to database. The hashing process is done by mongoose middleware(see the User model)
    const user= await User.create({...req.body});

    //The token is generated by model instance methode (see User model) 
    const token=user.createJWT();
    
    res.status(StatusCodes.CREATED).json({user:{name:user.name},token});
}


const login=async (req,res)=>{
    //Take the user input
    const {email, password}=req.body;

    //if the user input is empty, throw error
    if(!email || !password){
        throw new BadRequestError('Please insert email and password')
    };

    //Search in database based on user input
    const user=await User.findOne({email});  

    //if it is not found in database, throw error
    if (!user){
        throw new UnauthenticatedError('Invalid Credentials')
    }

    //if the user found, then compare password using model instance methode in User model
    const isPasswordCorrect = await user.comparePassword(password);
    if(!isPasswordCorrect){
        throw new UnauthenticatedError('Invalid Credentials')
    }

    //If email being input is found and password is matched, create token using model instance methode in User model
    const token=user.createJWT()

    res.status(StatusCodes.OK).json({user:{name:user.name},token})
}

module.exports={register,login};